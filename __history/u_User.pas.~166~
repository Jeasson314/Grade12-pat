unit u_User;
interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, StdCtrls, ComCtrls, ExtCtrls, u_SignIn, dm_co2,
  u_UserNormal, u_Signup, u_graph, DBCtrls, DB, ADODB, Mask, DateUtils;

type
  Tfrm_Users = class(TForm)
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    btnGraph: TButton;
    DBGridUsers: TDBGrid;
    pnlWarning: TPanel;
    pnlFirst: TPanel;
    edtMileage: TEdit;
    Label1: TLabel;
    LookupAddNew: TDBLookupComboBox;
    Label3: TLabel;
    btnAdd: TButton;
    DBNavigator1: TDBNavigator;
    GroupBox1: TGroupBox;
    btnDelete: TButton;
    lookupUserMake: TDBLookupComboBox;
    Label2: TLabel;
    edtElectricity: TEdit;
    Label4: TLabel;
    edtMileageMain: TEdit;
    edtUpdate: TButton;
    DBEdit1: TDBEdit;
    DateTimeFrom: TDateTimePicker;
    DateTimeTo: TDateTimePicker;
    Label8: TLabel;
    Label5: TLabel;
    btnFilter: TButton;
    RadioSort: TRadioGroup;
    btnSort: TButton;
    DBSourceEmission: TDataSource;
    ADOUsersQuery: TADOQuery;
    DBSourceUserQuery: TDataSource;
    DBGrid1: TDBGrid;
    ADOEmissionQuery: TADOQuery;
    GroupBox2: TGroupBox;
    btnDisplay: TButton;
    RadioDisplay: TRadioGroup;
    ADOAdminQuery: TADOQuery;
    DBSourceAdminQuery: TDataSource;
    procedure FormActivate(Sender: TObject);
    procedure btnGraphClick(Sender: TObject);
    procedure edtUpdateClick(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnFilterClick(Sender: TObject);
    procedure btnSortClick(Sender: TObject);
    procedure btnDisplayClick(Sender: TObject);
    procedure PageControl1Change(Sender: TObject);
  private
    procedure UpdateLookup(sQuery: string);
    procedure UpdateEmission;
    procedure UpdateUserDate;
    procedure UpdateAdmin(sSQL: string);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frm_Users: Tfrm_Users;
  objUser: Signup;
  objUserdata: UserData;

implementation

uses u_Login;
{$R *.dfm}

procedure Tfrm_Users.btnAddClick(Sender: TObject);
var
  bFound: boolean;
  sSQL: string;
begin
  try
    bFound := false;
    with dmco2 do
    begin
      ADOCarList.first;
      ADOusers.first;
      while not(ADOCarList.eof) and (bFound = false) do
      begin
        if (ADOCarList['UserID'] = objUserdata.accessUserId)
          and ADOCarList['CarID'] = ADOUsersQuery['CarID'] then
        begin
          ADOCarList.edit;
          ADOCarList['CurrentMileage'] := strtoint(edtMileage.text);
          ADOCarList.post;
          bFound := true;
        end
        else
          ADOCarList.next;
      end;
      UpdateUserDate;
      sSQL := 'WHERE tblCarList.UserID = ' + objUserdata.accessUserId;
      sSQL := sSQL + ' AND Model =' + quotedstr(lookupUserMake.text)
        + 'AND Mileage = Null;';
      UpdateLookup(sSQL);
      if ADOUsersQuery['CarID'].isNull then
        pnlFirst.visible := false;
    end;

  except
    Showmessage('Their was a failure entering your vehicle mileage');
  end;
end;

procedure Tfrm_Users.btnDeleteClick(Sender: TObject);
begin
  // dmco2.ADOCars['CarID']

  if objUserdata.CanDelete(dmco2.ADOFootprint['EmissionDate']) = true then
    dmco2.ADOFootprint.delete
  else
    Showmessage(
      'We were unable to delete the message, this may be due to it being out of deleteable time range')
end;

procedure Tfrm_Users.btnDisplayClick(Sender: TObject);
begin
  if RadioDisplay.itemindex = 0 then
    UpdateAdmin(
      'Select Username,First_Name,Last_Name,Carbon_Footprint,[Last Updated],Goal,Email'
        + ' FROM tblUsers WHERE (OrganisationID = '
        + inttostr(objUserdata.AccessOrganisationID) + ');');
  if RadioDisplay.itemindex = 1 then
    UpdateAdmin(
      'SELECT tblUsers.Username AS Username, tblFootprint.EmissionDate AS [Emission Date], tblFootprint.Emission AS [Emission Amount]'
        +
        ' FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID'
        + ' WHERE (tblUsers.OrganisationID = ' + quotedstr
        (inttostr(objUserdata.AccessOrganisationID))
        + ');');
  if RadioDisplay.itemindex = 2 then
    UpdateAdmin(
      'SELECT tblUsers.Username AS username, tblCar.Make AS Make, tblCar.Model AS Model '
        + 'FROM tblCar INNER JOIN (tblUsers INNER JOIN tblCarList ON tblUsers.UserID = tblCarList.UserID) ON tblCar.CarID = tblCarList.CarID '
        + 'WHERE (OrganisationID = ' + quotedstr(inttostr(objUserdata.AccessOrganisationID)) + ');');

end;

procedure Tfrm_Users.btnFilterClick(Sender: TObject);
begin
  with dmco2 do
  begin
    ADOFootprint.filtered := false;
    ADOFootprint.filter := '(StartDate>=' + quotedstr
      (DateTimeToStr(DateTimeFrom.Date))
      + ') and (EndDate <' + quotedstr(DateTimeToStr(DateTimeTo.Date)) + ')';
    ADOFootprint.filtered := true;

  end;
end;

procedure Tfrm_Users.btnGraphClick(Sender: TObject);
begin
  frm_Graph.ShowModal;
end;

procedure Tfrm_Users.btnSortClick(Sender: TObject);
begin
  if RadioSort.itemindex = 0 then
    dmco2.ADOFootprint.sort := 'EmissionDate AESC';
  if RadioSort.itemindex = 1 then
    dmco2.ADOFootprint.sort := 'EmissionDate DESC';
end;

procedure Tfrm_Users.edtUpdateClick(Sender: TObject);
var
  iElectricity, iKilometer, iEmission: integer;
  sSQL: string;
  bFound: boolean;
begin
  try
    iElectricity := strtoint(edtElectricity.text);
    iKilometer := strtoint(edtMileageMain.text);

    iEmission := iElectricity * 1060;
    sSQL := 'WHERE tblCarList.UserID = ' + objUserdata.accessUserId;
    sSQL := sSQL + ' AND Model =' + quotedstr(lookupUserMake.text) + ';';
    UpdateLookup(sSQL);
    iKilometer := iKilometer - ADOUsersQuery['Mileage'];
    iEmission := iEmission + ((ADOUsersQuery['Emissions'] * iKilometer) / 1000);
    with dmco2 do
    begin
      ADOFootprint.insert;
      ADOFootprint['UserID'] := objUserdata.accessUserId;
      ADOFootprint['EmissionDate'] := Date;
      ADOFootprint['Emission'] := iEmission;
      ADOFootprint.post;
    end;
    bFound := false;
    with dmco2 do
    begin
      ADOCarList.first;
      while not(ADOCarList.eof) and (bFound = false) do
      begin
        if (ADOCarList['UserID'] = objUserdata.accessUserId) and
          (ADOCarList['CarID'] = ADOUsersQuery['CarID']) then
        begin
          ADOCarList.edit;
          ADOCarList['CurrentMileage'] := strtoint(edtMileageMain.text);
          ADOCarList.post;
          bFound := true;
        end
        else
          ADOCarList.next;
      end;
    end;
    UpdateUserDate;
  except
    Showmessage('Their was an error trying to update your carbon foortprint');
  end;
end;

procedure Tfrm_Users.FormActivate(Sender: TObject);
begin
  ADOAdminQuery.active := true;
  objUserdata := UserData.Usercreate(u_Login.objSignin.AccessUsername);
  objUserdata.CheckOrganisation;
  if objUserdata.admin = true then
    TabSheet2.tabVisible := true;
  if not WithinPastMonths(Date, dmco2.ADOFootprint['EmissionDate'], 1) then
    pnlWarning.Caption := 'Please input your current electricity and Mileage';
  // objUserdata.LoadCar;
  UpdateLookup('WHERE tblCarList.UserID = ' + objUserdata.accessUserId + ';');
  lookupUserMake.enabled := true;
  { if objUserdata.isFirstAccess = true then
    pnlFirst.Visible := true
    else
    pnlFirst.Visible := false; }

end;

procedure Tfrm_Users.PageControl1Change(Sender: TObject);
begin
showmessage('Show')
end;

procedure Tfrm_Users.UpdateAdmin(sSQL:string);
begin
  ADOAdminQuery.sql.clear;
  ADOAdminQuery.sql.add(sSQL);
  ADOAdminQuery.Open;
end;

procedure Tfrm_Users.UpdateEmission;
begin
  // ADOEmissionQuery.sql.clear;
  // ADOEmissionQuery.sql.add();
end;

procedure Tfrm_Users.UpdateLookup(sQuery: string);
begin
  ADOUsersQuery.sql.clear;
  ADOUsersQuery.sql.add(
    'SELECT tblCarList.CarListID AS CarListId,tblCarList.CurrentMileage AS Mileage,'
      + 'tblCar.CarID AS CarID, tblCar.Make AS Make, tblCar.Model AS Model, tblCar.[CO2 Emissions(g/km)] AS Emissions' + ' FROM tblCar INNER JOIN tblCarList ON tblCar.CarID = tblCarList.CarID ' + sQuery);
  ADOUsersQuery.Open;
end;

procedure Tfrm_Users.UpdateUserDate;
var
  bFound: boolean;
begin
  with dmco2 do
  begin
    ADOusers.first;
    bFound := false;
    while not(ADOusers.eof) and (bFound = false) do
    begin
      if (ADOusers['UserID'] = objUserdata.accessUserId) then
      begin
        ADOusers.edit;
        ADOusers['Last Updated'] := Date;
        ADOusers.post;
        bFound := true;
      end
      else
        ADOusers.next;
    end;
  end;
end;

end.
