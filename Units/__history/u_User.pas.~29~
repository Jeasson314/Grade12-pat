unit u_User;
interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, StdCtrls, ComCtrls, ExtCtrls, u_SignIn, dm_co2,
  u_UserNormal, u_Signup, u_graph, DBCtrls, DB, ADODB, Mask, DateUtils,
  pngimage;

type
  Tfrm_Users = class(TForm)
    PageControl1: TPageControl;
    tabSheetUser: TTabSheet;
    Admin: TTabSheet;
    btnGraph: TButton;
    DBGridUsers: TDBGrid;
    pnlWarning: TPanel;
    pnlFirst: TPanel;
    edtMileage: TEdit;
    Label1: TLabel;
    Label3: TLabel;
    btnAdd: TButton;
    DBNavigator1: TDBNavigator;
    GroupBox1: TGroupBox;
    btnDelete: TButton;
    Label2: TLabel;
    edtElectricity: TEdit;
    Label4: TLabel;
    edtMileageMain: TEdit;
    edtUpdate: TButton;
    DBEdit1: TDBEdit;
    DateTimeFrom: TDateTimePicker;
    DateTimeTo: TDateTimePicker;
    Label8: TLabel;
    Label5: TLabel;
    btnFilter: TButton;
    RadioSort: TRadioGroup;
    btnSort: TButton;
    DBSourceEmission: TDataSource;
    ADOUsersQuery: TADOQuery;
    DBSourceUserQuery: TDataSource;
    DBGridAdmin: TDBGrid;
    ADOEmissionQuery: TADOQuery;
    GroupBox2: TGroupBox;
    btnDisplay: TButton;
    RadioDisplay: TRadioGroup;
    ADOAdminQuery: TADOQuery;
    DBSourceAdminQuery: TDataSource;
    GroupBox3: TGroupBox;
    btnAdminSort: TButton;
    cmbSort: TComboBox;
    Database: TGroupBox;
    Statistics: TGroupBox;
    RadioStatistics: TRadioGroup;
    btnStatistics: TButton;
    cmbStatistics: TComboBox;
    RadioSortAdmin: TRadioGroup;
    CmbCars: TComboBox;
    cmbCarsAdd: TComboBox;
    DBNavigator2: TDBNavigator;
    btnDeleteAdmin: TButton;
    Label6: TLabel;
    imgAddCar: TImage;
    btnGraphAdmin: TButton;
    procedure FormActivate(Sender: TObject);
    procedure btnGraphClick(Sender: TObject);
    procedure edtUpdateClick(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnFilterClick(Sender: TObject);
    procedure btnSortClick(Sender: TObject);
    procedure btnDisplayClick(Sender: TObject);
    procedure PageControl1Change(Sender: TObject);
    procedure btnStatisticsClick(Sender: TObject);
    procedure btnAdminSortClick(Sender: TObject);
    procedure DBGridAdminCellClick(Column: TColumn);
    procedure btnDeleteAdminClick(Sender: TObject);
    procedure btnGraphAdminClick(Sender: TObject);
  private
    procedure UpdateLookup(sQuery: string);
    procedure UpdateEmission;
    procedure UpdateUserDate;
    procedure UpdateAdmin(sSQL: string);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frm_Users: Tfrm_Users;
  objUser: Signup;
  objUserdata: UserData;

implementation

uses u_Login;
{$R *.dfm}

//
// Procedure to handle the "Add" button click event for adding mileage to a user's car.
procedure Tfrm_Users.btnAddClick(Sender: TObject);
var
  bFound: boolean;
  sSQL: string;
begin
  try
    bFound := false;
    with dmco2 do
    begin
      ADOCarList.first;
      ADOusers.first;

      // Loop through the car list and user list to find a matching entry.
      while not(ADOCarList.eof) and (bFound = false) do
      begin
        if (ADOCarList['UserID'] = objUserdata.accessUserId) and
          (ADOCarList['CarID'] = ADOUsersQuery['CarID']) then
        begin
          ADOCarList.edit;
          ADOCarList['CurrentMileage'] := strtoint(edtMileage.text);
          ADOCarList.post;
          objUserdata.UpdateLog('Updated tblFootprint, tblCarlist, tblUser');
          bFound := true; // Exit the loop once a match is found.
        end
        else
          ADOCarList.next;
      end;

      // Update user data and perform lookup based on the updated car information.
      UpdateUserDate;
      sSQL := 'WHERE tblCarList.UserID = ' + objUserdata.accessUserId;
      sSQL := sSQL + ' AND Model =' + quotedstr(CmbCars.text)
        + 'AND Mileage IS NULL;';
      UpdateLookup(sSQL);

      if ADOUsersQuery['CarID'].isNull then
        pnlFirst.visible := false;
    end;
  except
    if CmbCars.text = '' then
      showmessage('Please select your car');
    if edtMileage.text = '' then
      showmessage('There was a failure entering your vehicle first mileage');
  end;
end;

procedure Tfrm_Users.btnDeleteAdminClick(Sender: TObject);
var
  idelete, iID: integer;
begin
  idelete := MessageDlg('Do you want to delete this record', mtWarning,
    mbOKCancel, 0);
  if idelete = mrOK then
  begin
    if RadioDisplay.itemindex = 1 then
    begin
      dmco2.ADOusers.locate('Username', ADOAdminQuery['Username'], []);
        iID := dmco2.ADOusers['UserID'];
        if (dmco2.ADOFootprint.locate('UserID', iID, [])) and
          (dmco2.ADOFootprint.locate('Emission', ADOAdminQuery['Emission'],
            []) = true) then
          ADOAdminQuery.delete;
    end
    else
      showmessage('You can not delete record in this table');
  end;
  objUserdata.UpdateLog('Deleted record from tblUser');
end;

procedure Tfrm_Users.btnDeleteClick(Sender: TObject);
var
  idelete: integer;
begin
  try
    // dmco2.ADOCars['CarID']
    idelete := MessageDlg('Do you want to delete this record', mtWarning,
      mbOKCancel, 0);
    if idelete = mrOK then
    begin
      if objUserdata.CanDelete(dmco2.ADOFootprint['EmissionDate']) = true then
      begin
        dmco2.ADOFootprint.delete;
        objUserdata.UpdateLog('Delete from tblFootprint');
      end
      else
        showmessage(
          'We were unable to delete the message, this may be due to it being out of deleteable time range')
    end;
  except
    showmessage('Their was an error in the deletion problem');
  end;
end;

procedure Tfrm_Users.btnAdminSortClick(Sender: TObject);
begin
  try
    case cmbSort.itemindex of
      0:
        begin
          if RadioSortAdmin.itemindex = 0 then
            ADOAdminQuery.sort := 'Username DESC';
          if RadioSortAdmin.itemindex = 1 then
            ADOAdminQuery.sort := 'Username ASC';
        end;
      1:
        begin
          if RadioSortAdmin.itemindex = 0 then
            ADOAdminQuery.sort := 'First_Name DESC';
          if RadioSortAdmin.itemindex = 1 then
            ADOAdminQuery.sort := 'First_Name ASC';
        end;
      2:
        begin
          if RadioSortAdmin.itemindex = 0 then
            ADOAdminQuery.sort := 'Last_Name DESC';
          if RadioSortAdmin.itemindex = 1 then
            ADOAdminQuery.sort := 'Last_Name ASC';
        end;
      3:
        begin
          if RadioSortAdmin.itemindex = 0 then
            ADOAdminQuery.sort := 'Last Updated DESC';
          if RadioSortAdmin.itemindex = 1 then
            ADOAdminQuery.sort := 'Last Updated ASC';
        end;
    end;
  except
    showmessage('Error sorting algorithm');
  end;
end;

// Procedure to handle the event when the "Display" button is clicked.
procedure Tfrm_Users.btnDisplayClick(Sender: TObject);
begin
  try
    // Check which radio button is selected and update the displayed information accordingly.
    if RadioDisplay.itemindex = 0 then
      UpdateAdmin(
        'Select Username, First_Name, Last_Name, Carbon_Footprint, [Last Updated], Goal, Email '
          + 'FROM tblUsers WHERE (OrganisationID = ' + inttostr
          (objUserdata.AccessOrganisationID) + ');');
    if RadioDisplay.itemindex = 1 then
      UpdateAdmin(
        'SELECT tblUsers.Username AS Username, tblFootprint.EmissionDate AS [Emission Date], tblFootprint.Emission AS [Emission Amount] '
          +
          'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
          + 'WHERE (tblUsers.OrganisationID = ' + inttostr
          (objUserdata.AccessOrganisationID) + ');');
    if RadioDisplay.itemindex = 2 then
      UpdateAdmin(
        'SELECT tblUsers.Username AS username, tblCar.Make AS Make, tblCar.Model AS Model '
          + 'FROM tblCar INNER JOIN (tblUsers INNER JOIN tblCarList ON tblUsers.UserID = tblCarList.UserID) ' + 'ON tblCar.CarID = tblCarList.CarID ' + 'WHERE (OrganisationID = ' + inttostr(objUserdata.AccessOrganisationID) + ');');
  except
    showmessage('There was an error displaying the information in the table');
  end;
end;

// Procedure to handle the "Filter" button click event to filter data within a specific date range.
procedure Tfrm_Users.btnFilterClick(Sender: TObject);
begin
  try
    with dmco2 do
    begin
      ADOQueryfootprint.filtered := false; // Clear any existing filters
      // Apply a date range filter to the ADOQueryfootprint based on selected date values.
      ADOQueryfootprint.filter := 'EmissionDate >= ' + quotedstr
        (FormatDateTime('yyyy/mm/dd', DateTimeFrom.Date))
        + ' and EmissionDate < ' + quotedstr(FormatDateTime('yyyy/mm/dd',
          DateTimeTo.Date));
      ADOQueryfootprint.filtered := true; // Enable the filter
    end;
  except
    showmessage('There was an error filtering from your selected dates');
  end;
end;

// Procedure to handle the "Graph Admin" button click event for showing a graph (admin version).
procedure Tfrm_Users.btnGraphAdminClick(Sender: TObject);
begin
  try
    frm_Graph.ShowModal;
  except
    showmessage('There was an error showing the graph form');
  end;
end;

// Procedure to handle the "Graph" button click event for showing a graph (user version).
procedure Tfrm_Users.btnGraphClick(Sender: TObject);
begin
  try
    frm_Graph.ShowModal;
  except
    showmessage('There was an error showing the graph form');
  end;
end;

// Procedure to handle the "Sort" button click event for sorting data.
procedure Tfrm_Users.btnSortClick(Sender: TObject);
begin
  try
    if RadioSort.itemindex = 0 then
      dmco2.ADOQueryfootprint.sort := 'EmissionDate ASC';
    if RadioSort.itemindex = 1 then
      dmco2.ADOQueryfootprint.sort := 'EmissionDate DESC';
  except
    showmessage('There was an error trying to sort');
  end;
end;

// Procedure to handle the event when the "Statistics" button is clicked.
procedure Tfrm_Users.btnStatisticsClick(Sender: TObject);
begin
  try
    if RadioStatistics.itemindex = 0 then // Check if user selection is by Username
    begin
      case cmbStatistics.itemindex of
        0:
          UpdateAdmin('SELECT Round(AVG(Emission),2) AS Average ' +
              'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
              + 'WHERE tblUsers.Username = ' + quotedstr
              (ADOAdminQuery['Username']) + ';'); // Query to calculate average emission for the selected user
        1:
          UpdateAdmin('SELECT MIN(Emission) AS Minimum ' +
              'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
              + 'WHERE tblUsers.Username = ' + quotedstr
              (ADOAdminQuery['Username']) + ';'); // Query to find minimum emission for the selected user
        2:
          UpdateAdmin('SELECT MAX(Emission) AS Maximum ' +
              'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
              + 'WHERE tblUsers.Username = ' + quotedstr
              (ADOAdminQuery['Username']) + ';'); // Query to find maximum emission for the selected user
      end;
    end;
    if RadioStatistics.itemindex = 1 then // Check if user selection is by Organisation
    begin
      case cmbStatistics.itemindex of
        0:
          UpdateAdmin('SELECT Round(AVG(Emission),2) AS Average ' +
              'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
              + 'WHERE tblUsers.OrganisationID = ' + inttostr
              (objUserdata.AccessOrganisationID) + ';'); // Query to calculate average emission for the selected organisation
        1:
          UpdateAdmin('SELECT MIN(Emission) AS Minimum ' +
              'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
              + 'WHERE tblUsers.OrganisationID = ' + inttostr
              (objUserdata.AccessOrganisationID) + ';'); // Query to find minimum emission for the selected organisation
        2:
          UpdateAdmin('SELECT MAX(Emission) AS Maximum ' +
              'FROM tblUsers INNER JOIN tblFootprint ON tblUsers.UserID = tblFootprint.UserID '
              + 'WHERE tblUsers.OrganisationID = ' + inttostr
              (objUserdata.AccessOrganisationID) + ';'); // Query to find maximum emission for the selected organisation
      end;
    end;
  except
    showmessage('There was an error displaying the statistics');
    // Display an error message if an exception occurs
  end;
end;

procedure Tfrm_Users.DBGridAdminCellClick(Column: TColumn);
begin
  // edtEdit.text:=DBSourceAdminQuery;
end;

// Procedure to handle the "Update" button click event for updating carbon footprint.
procedure Tfrm_Users.edtUpdateClick(Sender: TObject);
var
  iElectricity, iKilometer, iEmission, iFootprint: integer;
  sSQL: string;
  bFound: boolean;
  rEmission: real;
begin
  try
    // Convert input values to integers
    iElectricity := strtoint(edtElectricity.text);
    iKilometer := strtoint(edtMileageMain.text);

    // Calculate emissions based on electricity usage
    iEmission := iElectricity * 1060;

    // Create SQL for updating car data
    sSQL := 'WHERE tblCarList.UserID = ' + objUserdata.accessUserId;
    sSQL := sSQL + ' AND tblCar.Model =' + quotedstr(CmbCars.text) + ';';
    UpdateLookup(sSQL);

    // Calculate emissions based on mileage and add to previous emissions
    iKilometer := iKilometer - ADOUsersQuery['Mileage'];
    iEmission := (iEmission + (ADOUsersQuery['Emissions'] * iKilometer));
    rEmission := iEmission / 1000;

    // Insert new emission record in tblFootprint
    with dmco2 do
    begin
      ADOFootprint.insert;
      ADOFootprint['UserID'] := objUserdata.accessUserId;
      ADOFootprint['EmissionDate'] := Date;
      ADOFootprint['Emission'] := rEmission;
      ADOFootprint.post;
    end;

    // Update current car's mileage
    bFound := false;
    with dmco2 do
    begin
      ADOCarList.first;
      while not(ADOCarList.eof) and (bFound = false) do
      begin
        if (ADOCarList['UserID'] = objUserdata.accessUserId) and
          (ADOCarList['CarID'] = ADOUsersQuery['CarID']) then
        begin
          ADOCarList.edit;
          ADOCarList['CurrentMileage'] := strtoint(edtMileageMain.text);
          ADOCarList.post;
          bFound := true;
        end
        else
          ADOCarList.next;
      end;
    end;

    // Update user's carbon footprint
    UpdateUserDate;
    dmco2.ADOusers.first;
    bFound := false;
    while (not dmco2.ADOusers.eof) and (bFound = false) do
    begin
      if (dmco2.ADOusers['UserID'] = objUserdata.accessUserId) then
      begin
        iFootprint := dmco2.ADOusers['Carbon_Footprint'] + rEmission;
        dmco2.ADOusers.edit;
        dmco2.ADOusers['Carbon_Footprint'] := iFootprint;
        dmco2.ADOusers.post;
        bFound := true;
      end
      else
        dmco2.ADOusers.next;
    end;

    // Update user log
    objUserdata.UpdateLog('Updated tblFootprint, tblUser');
  except
    showmessage('There was an error trying to update your carbon footprint');
  end;
end;

// Procedure triggered when the form is activated.
procedure Tfrm_Users.FormActivate(Sender: TObject);
var
  path: string;
begin
  // Activate ADOAdminQuery
  ADOAdminQuery.active := true;

  // Create and initialize user data object
  objUserdata := UserData.Usercreate(u_Login.objSignin.AccessUsername);

  // Run queries to load data
  dmco2.runFootprint(
    'Select Emission,EmissionDate from tblFootprint WHERE UserID=' +
      objUserdata.accessUserId);
  dmco2.runCar(objUserdata.accessUserId);
  dmco2.runCarAdd(objUserdata.accessUserId);

  // Populate comboboxes
  dmco2.fillCombobox(CmbCars, dmco2.ADOQueryCar);
  dmco2.fillCombobox(cmbCarsAdd, dmco2.ADOQueryCar);

  // Check organization and set visibility of admin tab
  objUserdata.CheckOrganisation;
  if objUserdata.Admin = true then
    Admin.tabVisible := true
  else
    Admin.tabVisible := false;

  // Display warning if necessary
  if not WithinPastMonths(Date, dmco2.ADOFootprint['EmissionDate'], 1) then
    pnlWarning.Caption := 'Please input your current electricity and Mileage';

  // Update user data
  UpdateLookup('WHERE tblCarList.UserID = ' + objUserdata.accessUserId + ';');
  CmbCars.Enabled := true;

  // Set visibility of first-time access panel
  if objUserdata.isFirstAccess = true then
    pnlFirst.visible := true
  else
    pnlFirst.visible := false;

  // Load image for add car button
  path := ExpandFileName(ExtractFileDir(Application.ExeName))
    + '\images\AddCar.png';
  imgAddCar.picture.loadfromfile(path);

  // Update admin data
  UpdateAdmin(
    'Select Username, First_Name, Last_Name, Carbon_Footprint, [Last Updated], Goal, Email '
      + 'FROM tblUsers WHERE (OrganisationID = ' + inttostr
      (objUserdata.AccessOrganisationID) + ');');
end;

// Procedure triggered when the PageControl changes.
procedure Tfrm_Users.PageControl1Change(Sender: TObject);
begin
  frm_Users.width := 996;
end;

// Procedure to update the admin data based on SQL query.
procedure Tfrm_Users.UpdateAdmin(sSQL: string);
begin
  ADOAdminQuery.sql.clear;
  ADOAdminQuery.sql.add(sSQL);
  ADOAdminQuery.Open;
end;

// Procedure to update emission data (currently empty).
procedure Tfrm_Users.UpdateEmission;
begin
  // ADOEmissionQuery.sql.clear;
  // ADOEmissionQuery.sql.add();
end;

// Procedure to update lookup data based on SQL query.
procedure Tfrm_Users.UpdateLookup(sQuery: string);
begin
  try
    ADOUsersQuery.sql.clear;
    ADOUsersQuery.sql.add(
      'SELECT tblCarList.CarListID AS CarListId, tblCarList.CurrentMileage AS Mileage, '
        + 'tblCar.CarID AS CarID, tblCar.Make AS Make, tblCar.Model AS Model, tblCar.[CO2 Emissions(g/km)] AS Emissions ' + 'FROM tblCar INNER JOIN tblCarList ON tblCar.CarID = tblCarList.CarID ' + sQuery);
    ADOUsersQuery.Open;
  except
    showmessage('There was an error with the SQL statement');
  end;
end;

// Procedure to update the "Last Updated" date for the current user.
procedure Tfrm_Users.UpdateUserDate;
var
  bFound: boolean;
begin
  try
    with dmco2 do
    begin
      ADOusers.first;
      bFound := false;

      // Loop through user records to find and update the current user's "Last Updated" date.
      while not(ADOusers.eof) and (bFound = false) do
      begin
        if (ADOusers['UserID'] = objUserdata.accessUserId) then
        begin
          ADOusers.edit;
          ADOusers['Last Updated'] := Date;
          ADOusers.post;
          bFound := true;
        end
        else
          ADOusers.next;
      end;
    end;
  except
    showmessage('There was an error updating user date');
  end;
end;

end.
